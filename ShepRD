# -*- coding: utf-8 -*-
"""

@author: wiesbrock
"""
from PyQt5.QtGui import QPalette, QIcon
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QWidget, QPushButton,
                             QHBoxLayout, QVBoxLayout, QApplication, QLineEdit, QLabel, 
                             QTextEdit, QMessageBox, QGridLayout,QFileDialog, QComboBox
                             ,QTabWidget, QCheckBox, QApplication)
import datetime
import sys
import uuid
import psycopg2
import shutil
import numpy as np
import glob
import os


unique_id=str(uuid.uuid4())
conn=psycopg2.connect(host="XXXXXXXXXX",database="XXXXXXX", user="XXXXXXX", password="XXXXXXXXX")
cur = conn.cursor()
sql = "SELECT projectname FROM projects"
projects=cur.execute(sql)
result = cur.fetchall()

sql = "SELECT * FROM strain"
mouse_list=cur.execute(sql)
strain_list=cur.fetchall()
all_strains=[list(i) for i in strain_list]

final_result = [list(i) for i in result]
final_result=np.unique(final_result)

subprojects=[]

sql = "SELECT * FROM genotype"
mouse_list=cur.execute(sql)
genotype_list=cur.fetchall()
all_genotypes=[list(i) for i in genotype_list]



class Example(QWidget):
    
    

    def __init__(self):
        super(Example,self).__init__()

        self.initUI()
        
    def choose_path_dst(self):
        direct=QFileDialog.getExistingDirectory(self, 'Open file', "C://")
        self.dst_line.setText('{}'.format(direct))
    
    def choose_path_src(self):
        direct=QFileDialog.getExistingDirectory(self, 'Open file', "C://")
        self.source_line.setText('{}'.format(direct))
        
    def closeEvent(self, event):

        reply = QMessageBox.question(self, 'Message',
                                     "Are you sure to quit?", QMessageBox.Yes |
                                     QMessageBox.No, QMessageBox.No)

        if reply == QMessageBox.Yes:

            event.accept()
        else:

            event.ignore()
          
    def submit_data(self):
        success=0
        if self.successbox.isChecked():
            success=1 
        else:
            success=0
        experimenter=self.expEdit.text()
        date_time=self.date.text()
        project=self.comboBox.currentText()
        strain=self.comboBox3.currentText()
        genotype=self.comboBox4.currentText()
        comment=self.commentEdit.toPlainText()
        src=self.source_line.text()
        dst=self.dst_line.text()
        elab=self.elab.text()
        unique_id=self.id_line.text()
        succ_box=QMessageBox()
        text_box=self.comboBox2.currentText()
        text_box="'"+text_box+"'"
        conn=psycopg2.connect(host="XXXXXXXX",database="XXXXXXX", user="XXXXXXX", password="XXXXXXXX")
        cur = conn.cursor()
        cur.execute('SELECT datatypes FROM projects WHERE subproject={};'.format(text_box))
        valid_ext=cur.fetchall()
        valid_ext=[list(i) for i in valid_ext]
        valid_ext=str(valid_ext)[3:-3]
        print(valid_ext)
        valid_ext=valid_ext.split(",")
        #valid_ext=valid_ext.strip('][').split(', ')
        print(valid_ext)
        #valid_ext = ast.literal_eval(valid_ext)
        print(valid_ext)
        print(valid_ext)
        dataset_link=src
        endings=glob.glob(dataset_link+'\\*')
        matrix=np.zeros((len(endings),len(valid_ext),),dtype=str)
        for i in range(len(endings)):
            for m in range(len(valid_ext)):
                matrix[i,m]=endings[i].endswith(valid_ext[m])
        
        valid_check=np.zeros((len(endings),1))
        for n in range(len(endings)):
            if matrix[n,0]!=matrix[n,1]:
                valid_check[n]=1
        
        if np.sum(valid_check)==len(valid_check):
            print("submit")
            file_list=glob.glob(src)
        
            for i in range(len(file_list)):
                shutil.move(file_list[i],dst)


            print("Succesful backup")
            succ_box.setText("Succesful backup")
        
            conn=psycopg2.connect(host="XXXXXX",database="XXXXXXXX", user="XXXXXXX", password="XXXXXXXX")
            print("Login succesful")
            succ_box.setText("Login succesful")
            cur = conn.cursor()
            cur.execute("INSERT INTO datasets(dataset_id,source,destination,experimenter,project,strain,genotype,date,comment,elab,success) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",([unique_id,src,dst,experimenter,project,strain,genotype,date_time,comment,elab, success]))
            success=0
            print("Data is collected")
            succ_box.setText("Data is collected")
            conn.commit()
            cur.close()
            conn.close()    
            print("Entry succesful")
            succ_box.setText("Entry succesful")
            succ_box.setText("Your Backup was sucessful")
            succ_box.exec()
            
            root = dst
            path = os.path.join(root, "targetdirectory")
            file_list=[]

            i=-1
            for path, subdirs, files in os.walk(root):
                i=i+1
                for name in files:
                    file_list.append((os.path.join(path, name)))
                    
            print(file_list)
            
            f = open(dst+"/ShepRD.txt", "w")
            f.write(str(experimenter)+',')
            f.write(str(date_time)+',')
            f.write(str(project)+',')
            f.write(str(strain)+',')
            f.write(str(comment)+',')
            f.write(str(src)+',')
            f.write(str(dst)+',')
            f.write(str(unique_id)+',')
            f.close()
            f = open(dst+"/ShepRD_list.txt", "w")
            f.write(str(file_list))
            f.close()
            
        plausibility=np.zeros((1,len(np.where(valid_check==0)[0])))
        if np.sum(valid_check)!=len(valid_check):
            for i in range(len(np.where(valid_check==0)[0])):
                if os.path.isdir(endings[int(np.where(valid_check==0)[i][0])])==True:
                    plausibility[i]=1
        
        print(plausibility)
            
        if np.sum(plausibility)==len(np.where(valid_check==0)[0]):
            print("submit")
            file_list=glob.glob(src)
        
            for i in range(len(file_list)):
                shutil.move(file_list[i],dst)

                print("Succesful backup")
                succ_box.setText("Succesful backup")
        
                conn=psycopg2.connect(host="XXXXXXXX",database="XXXXXXXX", user="XXXXXXXX", password="XXXXXXXX")
                print("Login succesful")
                succ_box.setText("Login succesful")
                cur = conn.cursor()
                cur.execute("INSERT INTO datasets(dataset_id,source,destination,experimenter,project,strain,date,comment) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)",([unique_id,src,dst,experimenter,project,strain,date_time,comment]))
                print("Data is collected")
                succ_box.setText("Data is collected")
                conn.commit()
                cur.close()
                conn.close()    
                print("Entry succesful")
                succ_box.setText("Entry succesful")
                succ_box.setText("Your Backup was sucessful")
                succ_box.exec()
                
                root = dst
                path = os.path.join(root, "targetdirectory")
                file_list=[]

                i=-1
                for path, subdirs, files in os.walk(root):
                    i=i+1
                    for name in files:
                        file_list.append((os.path.join(path, name)))
                    
                print(file_list)
                
                f = open("ShepRD.txt", "w")
                f.write(str(experimenter))
                f.write(str(date_time))
                #project,strain,comment,src,dst,unique_id)
                f.close()
                f = open("ShepRD_list.txt", "w")
                f.write(file_list)
                f.close()
        else:
            succ_box.setText("Wrong Datatype. The backup was not succesful")
            succ_box.exec()
                        
    def update_id(self):
        self.id_line.setText(str(uuid.uuid4()))
        self.dst_line.clear()
        self.source_line.clear()
        self.id_line.update()
        self.date.clear()
        self.date.setText(str(datetime.datetime.now())[:-7])
        self.elab.clear()
        reset_box=QMessageBox()
        reset_box.setText("Ready for new Entries")
        #reset_box.setIconPixmap(QIcon('Desktop\RTG_Logo600x6002'))
        reset_box.exec()
        print('Reset')
                 
        
       
    def update_subprojects(self):
        
       
        
        conn=psycopg2.connect(host="XXXXXXX",database="XXXXXXXX", user="XXXXXXX", password="XXXXXXXX")
        cur=conn.cursor()
        text_box=self.comboBox.currentText()
        text_box="'"+text_box+"'"
        cur.execute('SELECT subproject FROM projects WHERE projectname={};'.format(text_box))
        subprojects=cur.fetchall()
        final_subprojects = [list(i) for i in subprojects]
        self.comboBox2.clear()
        
        
        for i in range(len(final_subprojects)):
            
            self.comboBox2.addItem(final_subprojects[i][0])
            
        self.comboBox2.update()
        
        text_box=self.comboBox2.currentText()
        text_box="'"+text_box+"'"
        
        cur.execute('SELECT datatypes FROM projects WHERE subproject={};'.format(text_box))
        datatypes=cur.fetchall()
        datatypes = [list(i) for i in datatypes]
        self.type_line.clear()
        datatypes=str(datatypes[0])
        print(datatypes)
        self.type_line.setText(datatypes)
        self.type_line.update()
        QApplication.processEvents()
        
        
        
    

    def initUI(self):
        
      
     
        self.comboBox = QComboBox(self)
        for i in range(len(final_result)):
            self.comboBox.addItem(final_result[i])
          
        self.comboBox2=QComboBox(self)
        
        self.comboBox3=QComboBox(self)
        
        self.comboBox4=QComboBox(self)
        
        
        
        
        conn=psycopg2.connect(host="XXXXXX",database="XXXXXXX", user="XXXXXXX", password="XXXXXXXX")
        cur=conn.cursor()
        text_box=self.comboBox.currentText()
        text_box="'"+text_box+"'"
        cur.execute('SELECT subproject FROM projects WHERE projectname={};'.format(text_box))
        subprojects=cur.fetchall()
        final_subprojects = [list(i) for i in subprojects]
        
        for i in range(len(all_strains)):
            self.comboBox3.addItem(all_strains[i][0])
            
        for i in range(len(all_genotypes)):
            self.comboBox4.addItem(all_genotypes[i][0])
        
        for i in range(len(final_subprojects)):
            self.comboBox2.addItem(final_subprojects[i][0])
            
        text_box=self.comboBox2.currentText()
        text_box="'"+text_box+"'"
         
        cur.execute('SELECT datatypes FROM projects WHERE subproject={};'.format(text_box))
        subprojects=cur.fetchall()
        datatypes = [list(i) for i in subprojects][0]
        datatypes=str(datatypes)
        print(datatypes)
           
        self.okButton = QPushButton("Submit")
        self.cancelButton = QPushButton("Quit")
        self.updateButton=QPushButton("Update Projects")
        self.update_id_button=QPushButton("New Upload")
        self.folder_source_Button = QPushButton("File...")
        self.folder_dst_Button = QPushButton("File...")
        self.plausible=QLabel('Activate Plausibility check')
        self.plausible_check=QCheckBox()
        self.type_line=QLabel(datatypes)
        self.type_label=QLabel("Allowed Datatypes")
        self.id_line=QLabel(unique_id)
        self.id_label=QLabel("ID")
        self.subproject_label=QLabel("Subproject")
        self.source_line=QLineEdit(self)
        self.source=QLabel('Source')
        self.dst_line=QLineEdit(self)
        self.dst=QLabel('Destination')
        #self.strain_line=QLineEdit(self)
        self.strain=QLabel('Strain')
        self.genotype=QLabel('Genotype')
        self.mouseid=QLineEdit(self)
        self.mouseid_line=QLabel('Mouse ID')
        self.elab=QLineEdit(self)
        self.elab_label=QLabel('ELab Link')
        self.commentEdit = QTextEdit(self)
        self.comment=QLabel('Comment')
        self.expEdit = QLineEdit(self)
        self.exp=QLabel('Experimenter')
        self.project=QLabel('Project')
        self.date=QLabel(str(datetime.datetime.now())[:-7])
        self.date_label=QLabel('Date and Time')
        self.successbox=QCheckBox()
        self.succesbox_label=QLabel("Experiment successful?")
        self.complete=QCheckBox()
        self.complete_label=QLabel("Did you check your entries?")
        
        grid = QGridLayout()
        grid.setSpacing(10)
        
        i=0
        
        grid.addWidget(self.exp,i,0)
        grid.addWidget(self.expEdit,i,1)
       
        i=i+1
        grid.addWidget(self.project,i,0)
        grid.addWidget(self.comboBox,i,1)
        grid.addWidget(self.update_id_button,i,2)
        self.update_id_button.clicked.connect(self.update_id)
        i=i+1
        grid.addWidget(self.subproject_label,i,0)
        grid.addWidget(self.comboBox2,i,1)
        grid.addWidget(self.updateButton,i,2)
        self.updateButton.clicked.connect(self.update_subprojects)
        
        
        
        i=i+1
        grid.addWidget(self.date_label,i,0)
        grid.addWidget(self.date,i,1)
        
        i=i+1
        grid.addWidget(self.source,i,0)
        grid.addWidget(self.source_line,i,1)
        grid.addWidget(self.folder_source_Button,i,2)
        self.folder_source_Button.clicked.connect(self.choose_path_src)
        
        i=i+1
        grid.addWidget(self.dst,i,0)
        grid.addWidget(self.dst_line,i,1)
        grid.addWidget(self.folder_dst_Button,i,2)
        self.folder_dst_Button.clicked.connect(self.choose_path_dst)
        
        i=i+1
        grid.addWidget(self.strain,i,0)
        grid.addWidget(self.comboBox3, i,1)
        
        i=i+1
        grid.addWidget(self.genotype,i,0)
        grid.addWidget(self.comboBox4, i,1)
        
        i=i+1
        grid.addWidget(self.mouseid_line,i,0)
        grid.addWidget(self.mouseid, i,1)
        
        i=i+1
        grid.addWidget(self.comment,i,0)
        grid.addWidget(self.commentEdit,i,1)
        
        i=i+1
        grid.addWidget(self.type_label,i,0)
        grid.addWidget(self.type_line,i,1)
        
        i=i+1
        grid.addWidget(self.id_label,i,0)
        grid.addWidget(self.id_line,i,1)
        
        i=i+1
        grid.addWidget(self.elab_label,i,0)
        grid.addWidget(self.elab,i,1)
        
        i=i+1
        grid.addWidget(self.plausible,i,0)
        grid.addWidget(self.plausible_check,i,1)
        
        i=i+1
        grid.addWidget(self.complete_label,i,0)
        grid.addWidget(self.complete,i,1)
        
        i=i+1
        grid.addWidget(self.succesbox_label,i,0)
        grid.addWidget(self.successbox,i,1)

        i=i+1
        grid.addWidget(self.okButton,i,0)
        self.okButton.clicked.connect(self.submit_data)
        grid.addWidget(self.cancelButton,i,1)
        self.cancelButton.clicked.connect(self.close)
        
        
        self.setLayout(grid)

        self.setGeometry(800, 300, 500, 300)
        self.setWindowTitle('ShepRD')
        self.setWindowIcon(QIcon('Desktop\RTG_Logo600x6002'))

        self.show()
        





def main():
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
    
